{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar ResizeObserver = _interopDefault(require('resize-observer-polyfill'));\n\nvar react = require('react');\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction index(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      ref = _ref.ref,\n      onResize = _ref.onResize; // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n\n\n  var defaultRef = react.useRef(null);\n  ref = ref || defaultRef;\n\n  var _useState = react.useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n\n  var previous = react.useRef({\n    width: undefined,\n    height: undefined\n  });\n  react.useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n\n    var element = ref.current;\n    var resizeObserver = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n\n      if (!entries.length) {\n        return;\n      }\n\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n\n        if (onResize) {\n          onResize(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n    resizeObserver.observe(element);\n    return function () {\n      return resizeObserver.unobserve(element);\n    };\n  }, [ref, onResize]);\n  return react.useMemo(function () {\n    return _extends({\n      ref: ref\n    }, size);\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\n\nmodule.exports = index;","map":{"version":3,"sources":["/Users/mayarashwan/Desktop/BootCamp/TODO-List/client/node_modules/use-resize-observer/polyfilled.js"],"names":["_interopDefault","ex","ResizeObserver","require","react","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","index","_temp","_ref","ref","onResize","defaultRef","useRef","_useState","useState","width","undefined","height","size","setSize","previous","useEffect","current","Element","element","resizeObserver","entries","Array","isArray","entry","newWidth","Math","round","contentRect","newHeight","newSize","observe","unobserve","useMemo","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar ResizeObserver = _interopDefault(require('resize-observer-polyfill'));\nvar react = require('react');\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction index (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      ref = _ref.ref,\n      onResize = _ref.onResize;\n\n  // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n  var defaultRef = react.useRef(null);\n  ref = ref || defaultRef;\n\n  var _useState = react.useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n\n  var previous = react.useRef({\n    width: undefined,\n    height: undefined\n  });\n  react.useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n\n    var element = ref.current;\n    var resizeObserver = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n\n      if (!entries.length) {\n        return;\n      }\n\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n\n        if (onResize) {\n          onResize(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n    resizeObserver.observe(element);\n    return function () {\n      return resizeObserver.unobserve(element);\n    };\n  }, [ref, onResize]);\n  return react.useMemo(function () {\n    return _extends({\n      ref: ref\n    }, size);\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\n\nmodule.exports = index;\n"]},"metadata":{},"sourceType":"script"}