"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Filename", {
  enumerable: true,
  get: function get() {
    return _FileUploader.Filename;
  }
});
Object.defineProperty(exports, "FileUploaderButton", {
  enumerable: true,
  get: function get() {
    return _FileUploader.FileUploaderButton;
  }
});
Object.defineProperty(exports, "FileUploaderSkeleton", {
  enumerable: true,
  get: function get() {
    return _FileUploader2.default;
  }
});
Object.defineProperty(exports, "FileUploaderItem", {
  enumerable: true,
  get: function get() {
    return _FileUploaderItem.default;
  }
});
Object.defineProperty(exports, "FileUploaderDropContainer", {
  enumerable: true,
  get: function get() {
    return _FileUploaderDropContainer.default;
  }
});
exports.default = void 0;

var _FileUploader = _interopRequireWildcard(require("./FileUploader"));

var _FileUploader2 = _interopRequireDefault(require("./FileUploader.Skeleton"));

var _FileUploaderItem = _interopRequireDefault(require("./FileUploaderItem"));

var _FileUploaderDropContainer = _interopRequireDefault(require("./FileUploaderDropContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var _default = _FileUploader.default;
exports.default = _default;