{"ast":null,"code":"var _defaultTranslations;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Close16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport { match, keys } from '../../internal/keyboard';\nvar prefix = settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nvar ListBoxSelection = function ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId,\n      disabled = _ref.disabled;\n  var className = cx(\"\".concat(prefix, \"--list-box__selection\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tag--filter\"), selectionCount), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n\n  var handleOnClick = function handleOnClick(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    }\n\n    clearSelection(event);\n  };\n\n  var handleOnKeyDown = function handleOnKeyDown(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    } // When a user hits ENTER, we'll clear the selection\n\n\n    if (match(event, keys.Enter)) {\n      clearSelection(event);\n    }\n  };\n\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  return React.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: disabled ? -1 : 0,\n    onClick: handleOnClick,\n    onKeyDown: handleOnKeyDown,\n    \"aria-label\": \"Clear Selection\",\n    title: description\n  }, selectionCount, React.createElement(Close16, null));\n};\n\nexport var translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxSelection;","map":{"version":3,"sources":["/Users/mayarashwan/Desktop/BootCamp/TODO-List/client/node_modules/carbon-components-react/es/components/ListBox/ListBoxSelection.js"],"names":["_defaultTranslations","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","cx","React","PropTypes","Close16","settings","match","keys","prefix","ListBoxSelection","_ref","_cx","clearSelection","selectionCount","t","translateWithId","disabled","className","concat","handleOnClick","event","stopPropagation","handleOnKeyDown","Enter","description","createElement","role","tabIndex","onClick","onKeyDown","title","translationIds","defaultTranslations","propTypes","func","isRequired","number","defaultProps","id"],"mappings":"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","sourcesContent":["var _defaultTranslations;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Close16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport { match, keys } from '../../internal/keyboard';\nvar prefix = settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nvar ListBoxSelection = function ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId,\n      disabled = _ref.disabled;\n  var className = cx(\"\".concat(prefix, \"--list-box__selection\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tag--filter\"), selectionCount), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n\n  var handleOnClick = function handleOnClick(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    }\n\n    clearSelection(event);\n  };\n\n  var handleOnKeyDown = function handleOnKeyDown(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    } // When a user hits ENTER, we'll clear the selection\n\n\n    if (match(event, keys.Enter)) {\n      clearSelection(event);\n    }\n  };\n\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  return React.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: disabled ? -1 : 0,\n    onClick: handleOnClick,\n    onKeyDown: handleOnKeyDown,\n    \"aria-label\": \"Clear Selection\",\n    title: description\n  }, selectionCount, React.createElement(Close16, null));\n};\n\nexport var translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxSelection;"]},"metadata":{},"sourceType":"module"}